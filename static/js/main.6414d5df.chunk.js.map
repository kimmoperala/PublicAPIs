{"version":3,"sources":["MapView.js","Options.js","index.js"],"names":["MapView","position","this","props","station","lat","lon","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","name","bikesAvailable","React","Component","Options","state","items","isLoaded","handleChange","bind","event","obj","JSON","parse","target","value","setState","fetch","method","headers","body","stringify","json","then","response","data","bikeRentalStations","teksti","spacesAvailable","onChange","hidden","map","item","key","stationId","App","ReactDOM","render","document","getElementById"],"mappings":"2QAGaA,EAAb,uKAGI,IAAMC,EAAW,CAACC,KAAKC,MAAMC,QAAQC,IAAKH,KAAKC,MAAMC,QAAQE,KAC7D,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQP,EAAUQ,KAAMP,KAAKC,MAAMM,MACtC,kBAACC,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER,kBAACC,EAAA,EAAD,CAAQZ,SAAUA,GAClB,kBAACa,EAAA,EAAD,KAAQZ,KAAKC,MAAMC,QAAQW,KAAK,6BAAhC,yBAAuDb,KAAKC,MAAMC,QAAQY,sBAXlF,GAA6BC,IAAMC,WCKtBC,EAAb,kDAGE,WAAYhB,GAAO,IAAD,8BAChB,cAAMA,IACDiB,MAAQ,CACXC,MAAO,GACPC,UAAU,EACVlB,QAAS,CACPC,IAbQ,OAcRC,IAbQ,QAeVG,KAdW,IAiBb,EAAKc,aAAe,EAAKA,aAAaC,KAAlB,gBAZJ,EAHpB,yDAmBeC,GACX,IAAIC,EAAMC,KAAKC,MAAMH,EAAMI,OAAOC,OAClC5B,KAAK6B,SAAS,CACZ3B,QAASsB,MAtBf,0CAuCuB,IAAD,OAGlBM,MAAM,kEAAmE,CACvEC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMR,KAAKS,UAAU,CACnB,MAAQ,8RAYVC,MAAM,IAEHC,MAAK,SAAAC,GAAQ,OAAIA,EAASF,UAC1BC,MAAK,SAAAD,GACJ,EAAKN,SAAS,CACZV,MAAOgB,EAAKG,KAAKC,mBACjBnB,UAAU,SAhEtB,+BAqEY,IAMJoB,EANG,EAC4BxC,KAAKkB,MAAjCE,EADA,EACAA,SAAUD,EADV,EACUA,MAAOjB,EADjB,EACiBA,QACxB,OAAKkB,GAQHoB,EAnFU,SAkFRxC,KAAKkB,MAAMhB,QAAQC,IACZ,2BAAG,8BAEH,2BAAID,EAAQW,KAAZ,2BAAoCX,EAAQY,eAA5C,kCACiBZ,EAAQuC,iBAGhC,oCACE,4BAAQC,SAAU1C,KAAKqB,cACrB,4BAAQsB,QAAQ,GAAhB,iBACDxB,EAAMyB,KAAI,SAAAC,GAAI,OACX,4BAAQC,IAAKD,EAAKE,UAAWnB,MAAOH,KAAKS,UAAUW,IAChDA,EAAKhC,UAIX2B,EACD,kBAAC,EAAYxC,KAAKkB,SAvBf,gDAxEb,GAA6BH,IAAMC,WCF7BgC,G,MAAM,WACV,OACI,oCACE,sDACE,kBAAC,EAAD,SAKVC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.6414d5df.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, TileLayer, Marker, Popup} from 'react-leaflet';\n\nexport class MapView extends React.Component {\n\n  render() {\n    const position = [this.props.station.lat, this.props.station.lon];\n    return(\n      <Map center={position} zoom={this.props.zoom}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n        <Popup>{this.props.station.name}<br />Vapaita pyöriä: {this.props.station.bikesAvailable}</Popup>\n      </Marker>\n      </Map>\n  )\n  }\n}","import React from 'react'\nimport {MapView} from './MapView';\n\n// Default map view\nconst originLat=60.168;\nconst originLon=24.942;\nconst originZoom=14;\n\nexport class Options extends React.Component {\n\n  //items = all the retrieved stations; station = station which is selected\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      station: {\n        lat: originLat,\n        lon: originLon\n      },\n      zoom: originZoom\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Event handler for selecting the station from the list\n  handleChange(event) {\n    var obj = JSON.parse(event.target.value);\n    this.setState({\n      station: obj\n    })\n  }\n\n /* getWeatherData(){\n    // Receive weather data from Openweather API\n    fetch('http://api.openweathermap.org/data/2.5/weather?q=Helsinki&appid=114332134ea7ed53cb7a0e88a863eb5d', {\n    })\n        .then(response => response.json())\n        .then(json => {\n          console.log(\"json \", json)\n        })\n        .catch(function(err) {\n          console.log(\"Error happened: \", err)\n        })\n  }*/\n\n  componentDidMount() {\n\n    // Receive data from Digitransit API\n    fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', {\n      method: 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        \"query\": `{\n          bikeRentalStations {\n                    stationId\n                    name\n                    bikesAvailable\n                    spacesAvailable\n                    lat\n                    lon\n                    allowDropoff\n                    }\n        }`\n      }),\n      json: true\n    })\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            items: json.data.bikeRentalStations,\n            isLoaded: true\n          })\n        });\n  }\n\n  render() {\n    const {isLoaded, items, station} = this.state;\n    if (!isLoaded){\n      return <option>Lataa...</option>\n    }\n\n    let teksti;\n\n    // Empty field for starting view\n    if (this.state.station.lat===originLat){\n      teksti = <p><br/></p>\n    } else {\n      teksti = <p>{station.name}, vapaita pyöriä: {station.bikesAvailable},\n        vapaita pyöräpaikkoja: {station.spacesAvailable}</p>\n    }\n    return (\n        <>\n          <select onChange={this.handleChange}>\n            <option hidden={true}>Valitse asema</option>\n          {items.map(item => (\n              <option key={item.stationId} value={JSON.stringify(item)}>\n                {item.name}\n              </option>\n          ))}\n          </select>\n          {teksti}\n          <MapView {...this.state}/>\n        </>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Options} from \"./Options\"\n\nimport './index.css'\n\nconst App = () => {\n  return (\n      <>\n        <h1>Polkupyöräasemat</h1>\n          <Options />\n        </>\n  )\n};\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}