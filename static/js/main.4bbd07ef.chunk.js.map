{"version":3,"sources":["RoutingMachine.js","MapView.js","Weather.js","Options.js","index.js"],"names":["Routing","props","state","map","this","createLeafletElement","console","log","destination","setStartpoint","setEndpoint","destLat","destLon","leafletElement","spliceWaypoints","L","latLng","getWaypoints","getPlan","position","lat","lon","control","waypoints","addTo","React","Component","withLeaflet","provider","OpenStreetMapProvider","MapView","saveMap","setState","isMapInit","destText","handleChange","bind","handleSubmit","event","target","value","preventDefault","search","query","then","results","xCoord","x","yCoord","y","alert","inputForm","className","onSubmit","type","placeholder","onChange","station","Map","center","zoom","ref","TileLayer","attribution","url","Marker","Popup","name","bikesAvailable","Weather","weather","isLoaded","date","dateNow","Date","toLocaleString","fetch","response","json","catch","err","sunriseMinutes","sunsetMinutes","sunriseHours","sunsetHours","temperature","Number","main","temp","toFixed","feelsLike","feels_like","sunrise","sys","sunset","getMinutes","getHours","alt","src","icon","description","wind","speed","humidity","clouds","all","Options","items","obj","JSON","parse","method","headers","body","stringify","data","bikeRentalStations","teksti","spacesAvailable","hidden","item","key","stationId","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bbd07ef.chunk.js","sourcesContent":["import L from \"leaflet\"\nimport \"leaflet-routing-machine\"\nimport {withLeaflet} from \"react-leaflet\";\nimport React from 'react';\n\n// import {GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\n// const provider = new OpenStreetMapProvider();\n// const searchControl = new GeoSearchControl({\n//   provider: provider,\n// });\n\nclass Routing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      map: this.props.map\n    }\n  }\n\n  componentDidMount() {\n    this.createLeafletElement()\n    // this.state.map.leafletElement.addControl(searchControl);\n  }\n\n  componentDidUpdate(){\n    console.log(\"t채s채\",this.props.destination)\n    this.setStartpoint()\n    this.setEndpoint()\n  }\n\n  setEndpoint(){\n    const {destination} = this.props\n    const destLat = destination.destLat;\n    const destLon = destination.destLon;\n    console.log(\"Destlatti \", destLat)\n    console.log(\"Destlonni \", destLon)\n    if (destLon !== \"\") {\n      this.leafletElement.spliceWaypoints(1, 1, L.latLng(destLat, destLon));\n      console.log(\"getWaypoints \", this.leafletElement.getWaypoints())\n      console.log(\"getPlan \", this.leafletElement.getPlan())\n\n      return this.leafletElement.getPlan()\n    }\n  }\n\n  setStartpoint(){\n    const {position} = this.props\n    const lat = position.lat;\n    const lon = position.lon;\n    console.log(\"latti \", lat)\n    console.log(\"lonni \", lon)\n    this.leafletElement.spliceWaypoints(0,1, L.latLng(lat, lon))\n    console.log(\"getWaypoints \",this.leafletElement.getWaypoints())\n    console.log(\"getPlan \", this.leafletElement.getPlan())\n\n    return this.leafletElement.getPlan()\n  }\n\n  createLeafletElement() {\n    const {position} = this.props\n    const lat = position.lat;\n    const lon = position.lon;\n\n    this.leafletElement = L.Routing.control({\n      waypoints: [\n        L.latLng(lat, lon)\n      ]\n    }).addTo(this.state.map.leafletElement);\n    return this.leafletElement.getPlan()\n  }\n\n  render() {\n    return null\n  }\n}\nexport default withLeaflet(Routing);","import React from 'react'\nimport { Map, TileLayer, Marker, Popup} from 'react-leaflet';\nimport Routing from \"./RoutingMachine\";\nimport {OpenStreetMapProvider } from 'leaflet-geosearch';\n\nconst provider = new OpenStreetMapProvider();\n\n\nexport class MapView extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMapInit: false,\n      destText: \"\",\n      destination: {\n        destLat:\"\",\n        destLon:\"\"\n      },\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange (event){\n    console.log(event.target.value)\n    this.setState({destText: event.target.value})\n  }\n\n  async handleSubmit (event) {\n    console.log(\"l채hetetty \", this.state.destText);\n\n    event.preventDefault();\n\n    try {\n      const results = await provider.search({query: this.state.destText}).then(results => {\n        var xCoord = results[0].x;\n        var yCoord = results[0].y;\n        this.setState({\n              destination: {\n                destLat: yCoord,\n                destLon: xCoord\n              }\n            }\n        )\n        console.log(\"tulokset: \", results);\n        console.log(\"destLat: \", this.state.destination.destLat);\n        console.log(\"destLon: \", this.state.destination.destLon);\n      })\n    } catch (error) {\n      alert(\"Jotain meni pieleen. Yrit채 uutta osoitetta\");\n    }\n  }\n\n  saveMap = map => {\n    this.map = map;\n    this.setState({\n      isMapInit: true\n    })\n  }\n\n\n  render() {\n    const inputForm =(\n        <>\n        <p>Minne haluat menn채 asemalta? Kirjoita nimi tai osoite</p>\n        <form className=\"destination-form\" onSubmit={this.handleSubmit} >\n          <input type=\"text\" placeholder=\"Esim. Mannerheimintie 1, Helsinki\" className=\"input-box\" onChange={this.handleChange}/>\n          <button type=\"submit\">Etsi m채채r채np채채</button>\n        </form>\n          </>\n        )\n    const position = {\n      lat: this.props.station.lat,\n      lon: this.props.station.lon\n    }\n    const destination = this.state.destination;\n    return(\n        <>\n          {inputForm}\n          <Map center={position} zoom={this.props.zoom} ref={this.saveMap}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n        <Popup>{this.props.station.name}<br />Vapaita py철ri채: {this.props.station.bikesAvailable}</Popup>\n      </Marker>\n        {this.state.isMapInit && <Routing map={this.map} position={position} destination={destination}/>}\n      </Map>\n          </>\n  )\n  }\n}","import React from 'react'\n\nexport class Weather extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      weather: '',\n      isLoaded: false,\n      date: ''\n    }\n  }\n\n  componentDidMount() {\n    var dateNow = new Date();\n    dateNow = dateNow.toLocaleString();\n    //Receive weather data from Openweather API\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\n        'Helsinki&units=metric&appid=114332134ea7ed53cb7a0e88a863eb5d' +\n        '&lang=fi', {})\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            weather: json,\n            isLoaded: true,\n            date: dateNow\n          })\n          console.log(\"response \", json)\n        })\n        .catch(function(err) {\n          console.log(\"Error happened: \", err)\n        })\n  }\n\n  render() {\n    const {isLoaded, weather, date} = this.state\n    if (!isLoaded){\n      return (\n          <p>Lataa s채채t채</p>\n      )\n    }\n    else  {\n      // Round temperatures to 1 decimal\n      const temperature = Number((weather.main.temp).toFixed(1));\n      const feelsLike = Number((weather.main.feels_like).toFixed(1));\n\n      var sunrise = new Date(1000 * weather.sys.sunrise);\n      var sunset = new Date(1000 * weather.sys.sunset);\n\n      var sunriseMinutes, sunsetMinutes;\n      var sunriseHours, sunsetHours;\n\n      if (sunrise.getMinutes()<10){\n        sunriseMinutes = \"0\" + sunrise.getMinutes();\n      } else{\n        sunriseMinutes = sunrise.getMinutes();\n      }\n      if (sunrise.getHours()<10){\n        sunriseHours = \"0\" + sunrise.getHours();\n      } else{\n        sunriseHours = sunrise.getHours();\n      }\n      sunrise = sunriseHours + \":\" + sunriseMinutes;\n\n      if (sunset.getMinutes()<10){\n        sunsetMinutes = \"0\" + sunset.getMinutes();\n      } else{\n        sunsetMinutes = sunset.getMinutes();\n      }\n      if (sunset.getHours()<10){\n        sunsetHours = \"0\" + sunset.getHours();\n      } else{\n        sunsetHours = sunset.getHours();\n      }\n      sunset = sunsetHours + \":\" + sunsetMinutes;\n\n      return (\n          <div className=\"weather-box\">\n            <h3>S채채 {weather.name}</h3>\n            <img alt=\"s채채tilan kuva\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n            <h2 className=\"temperature-number\">{temperature}째C</h2>\n            {weather.weather[0].description}\n            <p>{date}</p>\n            <table className=\"weather-table\">\n              <tbody>\n              <tr>\n                <th>Tuuli</th><td>{weather.wind.speed} m/s</td>\n              </tr>\n              <tr>\n                <th>tuntuu kuin</th><td>{feelsLike}째C</td>\n              </tr>\n              <tr>\n                <th>Ilmankosteus</th><td>{weather.main.humidity} %</td>\n              </tr>\n              <tr>\n                <th>Pilvisyys</th><td>{weather.clouds.all} %</td>\n              </tr>\n              <tr>\n                <th>Auringonnousu</th><td>{sunrise}</td>\n              </tr>\n              <tr>\n                <th>Auringonlasku</th><td>{sunset}</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n    )\n    }\n  }\n}","import React from 'react'\nimport {MapView} from './MapView'\nimport {Weather} from './Weather'\n\n// Default map view\nconst originLat=60.168;\nconst originLon=24.942;\nconst originZoom=14;\n\nexport class Options extends React.Component {\n\n  //items = all the retrieved stations; station = station which is selected\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      station: {\n        lat: originLat,\n        lon: originLon\n      },\n      zoom: originZoom\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Event handler for selecting the station from the list\n  handleChange(event) {\n    var obj = JSON.parse(event.target.value);\n    this.setState({\n      station: obj\n    })\n  }\n\n\n\n  componentDidMount() {\n\n    // Receive data from Digitransit API\n    fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', {\n      method: 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        \"query\": `{\n          bikeRentalStations {\n                    stationId\n                    name\n                    bikesAvailable\n                    spacesAvailable\n                    lat\n                    lon\n                    allowDropoff\n                    }\n        }`\n      }),\n      json: true\n    })\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            items: json.data.bikeRentalStations,\n            isLoaded: true\n          })\n        });\n  }\n\n  render() {\n    const {isLoaded, items, station} = this.state;\n    if (!isLoaded){\n      return <option>Lataa...</option>\n    }\n\n    let teksti;\n\n    // Empty field for starting view\n    if (station.lat===originLat){\n      teksti = <p><br/></p>\n    } else {\n      teksti = <p>{station.name}, vapaita py철ri채: {station.bikesAvailable},\n        vapaita py철r채paikkoja: {station.spacesAvailable}</p>\n    }\n    return (\n        <>\n          <select onChange={this.handleChange}>\n            <option hidden={true}>Valitse asema</option>\n          {items.map(item => (\n              <option key={item.stationId} value={JSON.stringify(item)}>\n                {item.name}\n              </option>\n          ))}\n          </select>\n          {teksti}\n          <MapView {...this.state}/>\n          <Weather />\n        </>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Options} from \"./Options\"\n\nimport './index.css'\n\nconst App = () => {\n  return (\n      <>\n        <h1>PK-seudun polkupy철r채asemat</h1>\n          <Options />\n        </>\n  )\n};\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}