{"version":3,"sources":["MapView.js","Weather.js","Options.js","index.js"],"names":["MapView","position","this","props","station","lat","lon","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","name","bikesAvailable","React","Component","Weather","state","weather","isLoaded","date","dateNow","Date","toLocaleString","fetch","then","response","json","setState","console","log","catch","err","sunriseMinutes","sunsetMinutes","sunriseHours","sunsetHours","temperature","Number","main","temp","toFixed","feelsLike","feels_like","sunrise","sys","sunset","getMinutes","getHours","className","alt","src","icon","description","wind","speed","humidity","clouds","all","Options","items","handleChange","bind","event","obj","JSON","parse","target","value","method","headers","body","stringify","data","bikeRentalStations","teksti","spacesAvailable","onChange","hidden","map","item","key","stationId","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6094f7c8.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, TileLayer, Marker, Popup} from 'react-leaflet';\n\nexport class MapView extends React.Component {\n\n  render() {\n    const position = [this.props.station.lat, this.props.station.lon];\n    return(\n      <Map center={position} zoom={this.props.zoom}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n        <Popup>{this.props.station.name}<br />Vapaita pyöriä: {this.props.station.bikesAvailable}</Popup>\n      </Marker>\n      </Map>\n  )\n  }\n}","import React from 'react'\n\nexport class Weather extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      weather: '',\n      isLoaded: false,\n      date: ''\n    }\n  }\n\n\n  componentDidMount() {\n    var dateNow = new Date();\n    dateNow = dateNow.toLocaleString();\n    //Receive weather data from Openweather API\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\n        'Helsinki&units=metric&appid=114332134ea7ed53cb7a0e88a863eb5d' +\n        '&lang=fi', {})\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            weather: json,\n            isLoaded: true,\n            date: dateNow\n          })\n          console.log(\"response \", json)\n        })\n        .catch(function(err) {\n          console.log(\"Error happened: \", err)\n        })\n  }\n\n  render() {\n    const {isLoaded, weather, date} = this.state\n    if (!isLoaded){\n      return (\n          <p>Lataa säätä</p>\n      )\n    }\n    else  {\n      // Round temperatures to 1 decimal\n      const temperature = Number((weather.main.temp).toFixed(1));\n      const feelsLike = Number((weather.main.feels_like).toFixed(1));\n\n      var sunrise = new Date(1000 * weather.sys.sunrise);\n      var sunset = new Date(1000 * weather.sys.sunset);\n\n      var sunriseMinutes, sunsetMinutes;\n      var sunriseHours, sunsetHours;\n\n      if (sunrise.getMinutes()<10){\n        sunriseMinutes = \"0\" + sunrise.getMinutes();\n      } else{\n        sunriseMinutes = sunrise.getMinutes();\n      }\n      if (sunrise.getHours()<10){\n        sunriseHours = \"0\" + sunrise.getHours();\n      } else{\n        sunriseHours = sunrise.getHours();\n      }\n      sunrise = sunriseHours + \":\" + sunriseMinutes;\n\n      if (sunset.getMinutes()<10){\n        sunsetMinutes = \"0\" + sunset.getMinutes();\n      } else{\n        sunsetMinutes = sunset.getMinutes();\n      }\n      if (sunset.getHours()<10){\n        sunsetHours = \"0\" + sunset.getHours();\n      } else{\n        sunsetHours = sunset.getHours();\n      }\n      sunset = sunsetHours + \":\" + sunsetMinutes;\n\n      return (\n          <div className=\"weather-box\">\n            <h3>Sää {weather.name}</h3>\n            <img alt=\"säätilan kuva\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n            <h2 className=\"temperature-number\">{temperature}°C</h2>\n            {weather.weather[0].description}\n            <p>{date}</p>\n            <table className=\"weather-table\">\n              <tbody>\n              <tr>\n                <th>Tuuli</th><td>{weather.wind.speed} m/s</td>\n              </tr>\n              <tr>\n                <th>tuntuu kuin</th><td>{feelsLike}°C</td>\n              </tr>\n              <tr>\n                <th>Ilmankosteus</th><td> {weather.main.humidity} %</td>\n              </tr>\n              <tr>\n                <th>Pilvisyys</th><td> {weather.clouds.all} %</td>\n              </tr>\n              <tr>\n                <th>Auringonnousu</th><td>{sunrise}</td>\n              </tr>\n              <tr>\n                <th>Auringonlasku</th><td>{sunset}</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n    )\n    }\n  }\n}","import React from 'react'\nimport {MapView} from './MapView'\nimport {Weather} from './Weather'\n\n\n// Default map view\nconst originLat=60.168;\nconst originLon=24.942;\nconst originZoom=14;\n\nexport class Options extends React.Component {\n\n  //items = all the retrieved stations; station = station which is selected\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      station: {\n        lat: originLat,\n        lon: originLon\n      },\n      zoom: originZoom\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Event handler for selecting the station from the list\n  handleChange(event) {\n    var obj = JSON.parse(event.target.value);\n    this.setState({\n      station: obj\n    })\n  }\n\n\n\n  componentDidMount() {\n\n    // Receive data from Digitransit API\n    fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', {\n      method: 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        \"query\": `{\n          bikeRentalStations {\n                    stationId\n                    name\n                    bikesAvailable\n                    spacesAvailable\n                    lat\n                    lon\n                    allowDropoff\n                    }\n        }`\n      }),\n      json: true\n    })\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            items: json.data.bikeRentalStations,\n            isLoaded: true\n          })\n        });\n  }\n\n  render() {\n    const {isLoaded, items, station} = this.state;\n    if (!isLoaded){\n      return <option>Lataa...</option>\n    }\n\n    let teksti;\n\n    // Empty field for starting view\n    if (station.lat===originLat){\n      teksti = <p><br/></p>\n    } else {\n      teksti = <p>{station.name}, vapaita pyöriä: {station.bikesAvailable},\n        vapaita pyöräpaikkoja: {station.spacesAvailable}</p>\n    }\n    return (\n        <>\n          <select onChange={this.handleChange}>\n            <option hidden={true}>Valitse asema</option>\n          {items.map(item => (\n              <option key={item.stationId} value={JSON.stringify(item)}>\n                {item.name}\n              </option>\n          ))}\n          </select>\n          {teksti}\n          <MapView {...this.state}/>\n          <Weather />\n        </>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Options} from \"./Options\"\n\nimport './index.css'\n\nconst App = () => {\n  return (\n      <>\n        <h1>PK-seudun polkupyöräasemat</h1>\n          <Options />\n        </>\n  )\n};\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}