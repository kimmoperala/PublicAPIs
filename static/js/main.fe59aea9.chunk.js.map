{"version":3,"sources":["RoutingMachine.js","MapView.js","Weather.js","Options.js","index.js"],"names":["Routing","props","state","map","this","createLeafletElement","setStartpoint","setEndpoint","destination","destLat","destLon","console","log","leafletElement","spliceWaypoints","L","latLng","getWaypoints","getPlan","position","lat","lon","control","addTo","React","Component","withLeaflet","provider","OpenStreetMapProvider","MapView","saveMap","setState","isMapInit","destText","handleChange","bind","handleSubmit","event","target","value","preventDefault","search","query","then","results","xCoord","x","yCoord","y","alert","inputForm","className","onSubmit","type","onChange","station","Map","center","zoom","ref","TileLayer","attribution","url","Marker","Popup","name","bikesAvailable","Weather","weather","isLoaded","date","dateNow","Date","toLocaleString","fetch","response","json","catch","err","sunriseMinutes","sunsetMinutes","sunriseHours","sunsetHours","temperature","Number","main","temp","toFixed","feelsLike","feels_like","sunrise","sys","sunset","getMinutes","getHours","alt","src","icon","description","wind","speed","humidity","clouds","all","Options","items","obj","JSON","parse","method","headers","body","stringify","data","bikeRentalStations","teksti","spacesAvailable","hidden","item","key","stationId","App","ReactDOM","render","document","getElementById"],"mappings":"mUAWMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,IAAK,EAAKF,MAAME,KAHD,E,gEAQjBC,KAAKC,yB,2CAKLD,KAAKE,gBACLF,KAAKG,gB,oCAGO,IACLC,EAAeJ,KAAKH,MAApBO,YACDC,EAAUD,EAAYC,QACtBC,EAAUF,EAAYE,QAO5B,OANAC,QAAQC,IAAI,aAAcH,GAC1BE,QAAQC,IAAI,aAAcF,GAC1BN,KAAKS,eAAeC,gBAAgB,EAAE,EAAGC,IAAEC,OAAOP,EAASC,IAC3DC,QAAQC,IAAI,gBAAgBR,KAAKS,eAAeI,gBAChDN,QAAQC,IAAI,WAAYR,KAAKS,eAAeK,WAErCd,KAAKS,eAAeK,Y,sCAGb,IACPC,EAAYf,KAAKH,MAAjBkB,SACDC,EAAMD,EAASC,IACfC,EAAMF,EAASE,IAOrB,OANAV,QAAQC,IAAI,SAAUQ,GACtBT,QAAQC,IAAI,SAAUS,GACtBjB,KAAKS,eAAeC,gBAAgB,EAAE,EAAGC,IAAEC,OAAOI,EAAKC,IACvDV,QAAQC,IAAI,gBAAgBR,KAAKS,eAAeI,gBAChDN,QAAQC,IAAI,WAAYR,KAAKS,eAAeK,WAErCd,KAAKS,eAAeK,Y,6CAO3B,OAHAP,QAAQC,IAAI,QACZR,KAAKS,eAAiBE,IAAEf,QAAQsB,QAAQ,IACrCC,MAAMnB,KAAKF,MAAMC,IAAIU,gBACjBT,KAAKS,eAAeK,Y,+BAI3B,OAAO,S,GApDWM,IAAMC,WAuDbC,cAAY1B,GC7DrB2B,EAAW,I,MAAIC,GAGRC,EAAb,kDAEE,WAAY5B,GAAQ,IAAD,8BACjB,cAAMA,IA4CR6B,QAAU,SAAA3B,GACR,EAAKA,IAAMA,EACX,EAAK4B,SAAS,CACZC,WAAW,KA9Cb,EAAK9B,MAAQ,CACX8B,WAAW,EACXC,SAAU,sCACVzB,YAAa,CACXC,QAAQ,SACRC,QAAQ,WAIZ,EAAKwB,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAZH,EAFrB,yDAiBgBE,GACZ1B,QAAQC,IAAIyB,EAAMC,OAAOC,OACzBnC,KAAK2B,SAAS,CAACE,SAAUI,EAAMC,OAAOC,UAnB1C,4EAsBsBF,GAtBtB,mFAuBI1B,QAAQC,IAAI,gBAAcR,KAAKF,MAAM+B,UAErCI,EAAMG,iBAzBV,kBA4B4Bb,EAASc,OAAO,CAACC,MAAOtC,KAAKF,MAAM+B,WAAWU,MAAK,SAAAC,GACvE,IAAIC,EAASD,EAAQ,GAAGE,EACpBC,EAASH,EAAQ,GAAGI,EACxB,EAAKjB,SAAS,CACRvB,YAAa,CACXC,QAASsC,EACTrC,QAASmC,KAIjBlC,QAAQC,IAAI,aAAcgC,GAC1BjC,QAAQC,IAAI,YAAa,EAAKV,MAAMM,YAAYC,SAChDE,QAAQC,IAAI,YAAa,EAAKV,MAAMM,YAAYE,YAxCxD,8DA2CMuC,MAAM,iDA3CZ,+IAwDI,IAAMC,EACF,oCACA,uFACA,0BAAMC,UAAU,mBAAmBC,SAAUhD,KAAKgC,cAChD,2BAAOiB,KAAK,OAAOd,MAAOnC,KAAKF,MAAM+B,SAAUkB,UAAU,YAAYG,SAAUlD,KAAK8B,eACpF,4BAAQmB,KAAK,UAAb,mCAIAlC,EAAW,CACfC,IAAKhB,KAAKH,MAAMsD,QAAQnC,IACxBC,IAAKjB,KAAKH,MAAMsD,QAAQlC,KAEpBb,EAAcJ,KAAKF,MAAMM,YAC/B,OACI,oCACG0C,EACD,kBAACM,EAAA,EAAD,CAAKC,OAAQtC,EAAUuC,KAAMtD,KAAKH,MAAMyD,KAAMC,IAAKvD,KAAK0B,SAC1D,kBAAC8B,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER,kBAACC,EAAA,EAAD,CAAQ5C,SAAUA,GAClB,kBAAC6C,EAAA,EAAD,KAAQ5D,KAAKH,MAAMsD,QAAQU,KAAK,6BAAhC,yBAAuD7D,KAAKH,MAAMsD,QAAQW,iBAEzE9D,KAAKF,MAAM8B,WAAa,kBAAC,EAAD,CAAS7B,IAAKC,KAAKD,IAAKgB,SAAUA,EAAUX,YAAaA,UAjF1F,GAA6BgB,IAAMC,WCNtB0C,EAAb,kDACE,WAAYlE,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXkE,QAAS,GACTC,UAAU,EACVC,KAAM,IALQ,EADpB,gEAUuB,IAAD,OACdC,EAAU,IAAIC,KAClBD,EAAUA,EAAQE,iBAElBC,MAAM,yHAEU,IACX/B,MAAK,SAAAgC,GAAQ,OAAIA,EAASC,UAC1BjC,MAAK,SAAAiC,GACJ,EAAK7C,SAAS,CACZqC,QAASQ,EACTP,UAAU,EACVC,KAAMC,IAER5D,QAAQC,IAAI,YAAagE,MAE1BC,OAAM,SAASC,GACdnE,QAAQC,IAAI,mBAAoBkE,QA3B1C,+BA+BY,IAAD,EAC2B1E,KAAKF,MAAhCmE,EADA,EACAA,SAAUD,EADV,EACUA,QAASE,EADnB,EACmBA,KAC1B,GAAKD,EAKC,CAEJ,IAMIU,EAAgBC,EAChBC,EAAcC,EAPZC,EAAcC,OAAQhB,EAAQiB,KAAKC,KAAMC,QAAQ,IACjDC,EAAYJ,OAAQhB,EAAQiB,KAAKI,WAAYF,QAAQ,IAEvDG,EAAU,IAAIlB,KAAK,IAAOJ,EAAQuB,IAAID,SACtCE,EAAS,IAAIpB,KAAK,IAAOJ,EAAQuB,IAAIC,QA6BzC,OAvBEb,EADEW,EAAQG,aAAa,GACN,IAAMH,EAAQG,aAEdH,EAAQG,aAGzBZ,EADES,EAAQI,WAAW,GACN,IAAMJ,EAAQI,WAEdJ,EAAQI,WAEzBJ,EAAUT,EAAe,IAAMF,EAG7BC,EADEY,EAAOC,aAAa,GACN,IAAMD,EAAOC,aAEbD,EAAOC,aAGvBX,EADEU,EAAOE,WAAW,GACN,IAAMF,EAAOE,WAEbF,EAAOE,WAEvBF,EAASV,EAAc,IAAMF,EAGzB,yBAAK7B,UAAU,eACb,yCAASiB,EAAQH,MACjB,yBAAK8B,IAAI,sBAAgBC,IAAG,2CAAsC5B,EAAQA,QAAQ,GAAG6B,KAAzD,aAC5B,wBAAI9C,UAAU,sBAAsBgC,EAApC,SACCf,EAAQA,QAAQ,GAAG8B,YACpB,2BAAI5B,GACJ,2BAAOnB,UAAU,iBACf,+BACA,4BACE,qCAAc,4BAAKiB,EAAQ+B,KAAKC,MAAlB,SAEhB,4BACE,2CAAoB,4BAAKZ,EAAL,UAEtB,4BACE,4CAAqB,4BAAKpB,EAAQiB,KAAKgB,SAAlB,OAEvB,4BACE,yCAAkB,4BAAKjC,EAAQkC,OAAOC,IAApB,OAEpB,4BACE,6CAAsB,4BAAKb,IAE7B,4BACE,6CAAsB,4BAAKE,OAhErC,OACI,uDAnCV,GAA6BpE,IAAMC,WCOtB+E,EAAb,kDAGE,WAAYvG,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXuG,MAAO,GACPpC,UAAU,EACVd,QAAS,CACPnC,IAbQ,OAcRC,IAbQ,QAeVqC,KAdW,IAiBb,EAAKxB,aAAe,EAAKA,aAAaC,KAAlB,gBAZJ,EAHpB,yDAmBeE,GACX,IAAIqE,EAAMC,KAAKC,MAAMvE,EAAMC,OAAOC,OAClCnC,KAAK2B,SAAS,CACZwB,QAASmD,MAtBf,0CA4BuB,IAAD,OAGlBhC,MAAM,kEAAmE,CACvEmC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMJ,KAAKK,UAAU,CACnB,MAAQ,8RAYVpC,MAAM,IAEHjC,MAAK,SAAAgC,GAAQ,OAAIA,EAASC,UAC1BjC,MAAK,SAAAiC,GACJ,EAAK7C,SAAS,CACZ0E,MAAO7B,EAAKqC,KAAKC,mBACjB7C,UAAU,SArDtB,+BA0DY,IAMJ8C,EANG,EAC4B/G,KAAKF,MAAjCmE,EADA,EACAA,SAAUoC,EADV,EACUA,MAAOlD,EADjB,EACiBA,QACxB,OAAKc,GAQH8C,EAxEU,SAuER5D,EAAQnC,IACD,2BAAG,8BAEH,2BAAImC,EAAQU,KAAZ,2BAAoCV,EAAQW,eAA5C,kCACiBX,EAAQ6D,iBAGhC,oCACE,4BAAQ9D,SAAUlD,KAAK8B,cACrB,4BAAQmF,QAAQ,GAAhB,iBACDZ,EAAMtG,KAAI,SAAAmH,GAAI,OACX,4BAAQC,IAAKD,EAAKE,UAAWjF,MAAOoE,KAAKK,UAAUM,IAChDA,EAAKrD,UAIXkD,EACD,kBAAC,EAAY/G,KAAKF,OAClB,kBAAC,EAAD,QAxBG,gDA7Db,GAA6BsB,IAAMC,WCH7BgG,G,MAAM,WACV,OACI,oCACE,gEACE,kBAAC,EAAD,SAKVC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.fe59aea9.chunk.js","sourcesContent":["import L from \"leaflet\"\nimport \"leaflet-routing-machine\"\nimport {withLeaflet} from \"react-leaflet\";\nimport React from 'react';\n\n// import {GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\n// const provider = new OpenStreetMapProvider();\n// const searchControl = new GeoSearchControl({\n//   provider: provider,\n// });\n\nclass Routing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      map: this.props.map\n    }\n  }\n\n  componentDidMount() {\n    this.createLeafletElement()\n    // this.state.map.leafletElement.addControl(searchControl);\n  }\n\n  componentDidUpdate(){\n    this.setStartpoint()\n    this.setEndpoint()\n  }\n\n  setEndpoint(){\n    const {destination} = this.props\n    const destLat = destination.destLat;\n    const destLon = destination.destLon;\n    console.log(\"Destlatti \", destLat)\n    console.log(\"Destlonni \", destLon)\n    this.leafletElement.spliceWaypoints(1,1, L.latLng(destLat, destLon));\n    console.log(\"getWaypoints \",this.leafletElement.getWaypoints())\n    console.log(\"getPlan \", this.leafletElement.getPlan())\n\n    return this.leafletElement.getPlan()\n  }\n\n  setStartpoint(){\n    const {position} = this.props\n    const lat = position.lat;\n    const lon = position.lon;\n    console.log(\"latti \", lat)\n    console.log(\"lonni \", lon)\n    this.leafletElement.spliceWaypoints(0,1, L.latLng(lat, lon))\n    console.log(\"getWaypoints \",this.leafletElement.getWaypoints())\n    console.log(\"getPlan \", this.leafletElement.getPlan())\n\n    return this.leafletElement.getPlan()\n  }\n\n  createLeafletElement() {\n    console.log(\"Eka!\")\n    this.leafletElement = L.Routing.control({\n    }).addTo(this.state.map.leafletElement);\n    return this.leafletElement.getPlan()\n  }\n\n  render() {\n    return null\n  }\n}\nexport default withLeaflet(Routing);","import React from 'react'\nimport { Map, TileLayer, Marker, Popup} from 'react-leaflet';\nimport Routing from \"./RoutingMachine\";\nimport {OpenStreetMapProvider } from 'leaflet-geosearch';\n\nconst provider = new OpenStreetMapProvider();\n\n\nexport class MapView extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isMapInit: false,\n      destText: \"Kirjoita määränpääsi\",\n      destination: {\n        destLat:\"60.168\",\n        destLon:\"24.942\"\n      },\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  handleChange (event){\n    console.log(event.target.value)\n    this.setState({destText: event.target.value})\n  }\n\n  async handleSubmit (event) {\n    console.log(\"lähetetty \", this.state.destText);\n\n    event.preventDefault();\n\n    try {\n      const results = await provider.search({query: this.state.destText}).then(results => {\n        var xCoord = results[0].x;\n        var yCoord = results[0].y;\n        this.setState({\n              destination: {\n                destLat: yCoord,\n                destLon: xCoord\n              }\n            }\n        )\n        console.log(\"tulokset: \", results);\n        console.log(\"destLat: \", this.state.destination.destLat);\n        console.log(\"destLon: \", this.state.destination.destLon);\n      })\n    } catch (error) {\n      alert(\"Jotain meni pieleen. Yritä uutta osoitetta\");\n    }\n  }\n\n  saveMap = map => {\n    this.map = map;\n    this.setState({\n      isMapInit: true\n    })\n  }\n\n\n  render() {\n    const inputForm =(\n        <>\n        <p>Minne haluat mennä asemalta? Kirjoita nimi tai osoite</p>\n        <form className=\"destination-form\" onSubmit={this.handleSubmit} >\n          <input type=\"text\" value={this.state.destText} className=\"input-box\" onChange={this.handleChange}/>\n          <button type=\"submit\">Etsi määränpää</button>\n        </form>\n          </>\n        )\n    const position = {\n      lat: this.props.station.lat,\n      lon: this.props.station.lon\n    }\n    const destination = this.state.destination;\n    return(\n        <>\n          {inputForm}\n          <Map center={position} zoom={this.props.zoom} ref={this.saveMap}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n        <Popup>{this.props.station.name}<br />Vapaita pyöriä: {this.props.station.bikesAvailable}</Popup>\n      </Marker>\n        {this.state.isMapInit && <Routing map={this.map} position={position} destination={destination}/>}\n      </Map>\n          </>\n  )\n  }\n}","import React from 'react'\n\nexport class Weather extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      weather: '',\n      isLoaded: false,\n      date: ''\n    }\n  }\n\n  componentDidMount() {\n    var dateNow = new Date();\n    dateNow = dateNow.toLocaleString();\n    //Receive weather data from Openweather API\n    fetch('https://api.openweathermap.org/data/2.5/weather?q=' +\n        'Helsinki&units=metric&appid=114332134ea7ed53cb7a0e88a863eb5d' +\n        '&lang=fi', {})\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            weather: json,\n            isLoaded: true,\n            date: dateNow\n          })\n          console.log(\"response \", json)\n        })\n        .catch(function(err) {\n          console.log(\"Error happened: \", err)\n        })\n  }\n\n  render() {\n    const {isLoaded, weather, date} = this.state\n    if (!isLoaded){\n      return (\n          <p>Lataa säätä</p>\n      )\n    }\n    else  {\n      // Round temperatures to 1 decimal\n      const temperature = Number((weather.main.temp).toFixed(1));\n      const feelsLike = Number((weather.main.feels_like).toFixed(1));\n\n      var sunrise = new Date(1000 * weather.sys.sunrise);\n      var sunset = new Date(1000 * weather.sys.sunset);\n\n      var sunriseMinutes, sunsetMinutes;\n      var sunriseHours, sunsetHours;\n\n      if (sunrise.getMinutes()<10){\n        sunriseMinutes = \"0\" + sunrise.getMinutes();\n      } else{\n        sunriseMinutes = sunrise.getMinutes();\n      }\n      if (sunrise.getHours()<10){\n        sunriseHours = \"0\" + sunrise.getHours();\n      } else{\n        sunriseHours = sunrise.getHours();\n      }\n      sunrise = sunriseHours + \":\" + sunriseMinutes;\n\n      if (sunset.getMinutes()<10){\n        sunsetMinutes = \"0\" + sunset.getMinutes();\n      } else{\n        sunsetMinutes = sunset.getMinutes();\n      }\n      if (sunset.getHours()<10){\n        sunsetHours = \"0\" + sunset.getHours();\n      } else{\n        sunsetHours = sunset.getHours();\n      }\n      sunset = sunsetHours + \":\" + sunsetMinutes;\n\n      return (\n          <div className=\"weather-box\">\n            <h3>Sää {weather.name}</h3>\n            <img alt=\"säätilan kuva\" src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n            <h2 className=\"temperature-number\">{temperature}°C</h2>\n            {weather.weather[0].description}\n            <p>{date}</p>\n            <table className=\"weather-table\">\n              <tbody>\n              <tr>\n                <th>Tuuli</th><td>{weather.wind.speed} m/s</td>\n              </tr>\n              <tr>\n                <th>tuntuu kuin</th><td>{feelsLike}°C</td>\n              </tr>\n              <tr>\n                <th>Ilmankosteus</th><td>{weather.main.humidity} %</td>\n              </tr>\n              <tr>\n                <th>Pilvisyys</th><td>{weather.clouds.all} %</td>\n              </tr>\n              <tr>\n                <th>Auringonnousu</th><td>{sunrise}</td>\n              </tr>\n              <tr>\n                <th>Auringonlasku</th><td>{sunset}</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n    )\n    }\n  }\n}","import React from 'react'\nimport {MapView} from './MapView'\nimport {Weather} from './Weather'\n\n// Default map view\nconst originLat=60.168;\nconst originLon=24.942;\nconst originZoom=14;\n\nexport class Options extends React.Component {\n\n  //items = all the retrieved stations; station = station which is selected\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      station: {\n        lat: originLat,\n        lon: originLon\n      },\n      zoom: originZoom\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Event handler for selecting the station from the list\n  handleChange(event) {\n    var obj = JSON.parse(event.target.value);\n    this.setState({\n      station: obj\n    })\n  }\n\n\n\n  componentDidMount() {\n\n    // Receive data from Digitransit API\n    fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', {\n      method: 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        \"query\": `{\n          bikeRentalStations {\n                    stationId\n                    name\n                    bikesAvailable\n                    spacesAvailable\n                    lat\n                    lon\n                    allowDropoff\n                    }\n        }`\n      }),\n      json: true\n    })\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            items: json.data.bikeRentalStations,\n            isLoaded: true\n          })\n        });\n  }\n\n  render() {\n    const {isLoaded, items, station} = this.state;\n    if (!isLoaded){\n      return <option>Lataa...</option>\n    }\n\n    let teksti;\n\n    // Empty field for starting view\n    if (station.lat===originLat){\n      teksti = <p><br/></p>\n    } else {\n      teksti = <p>{station.name}, vapaita pyöriä: {station.bikesAvailable},\n        vapaita pyöräpaikkoja: {station.spacesAvailable}</p>\n    }\n    return (\n        <>\n          <select onChange={this.handleChange}>\n            <option hidden={true}>Valitse asema</option>\n          {items.map(item => (\n              <option key={item.stationId} value={JSON.stringify(item)}>\n                {item.name}\n              </option>\n          ))}\n          </select>\n          {teksti}\n          <MapView {...this.state}/>\n          <Weather />\n        </>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Options} from \"./Options\"\n\nimport './index.css'\n\nconst App = () => {\n  return (\n      <>\n        <h1>PK-seudun polkupyöräasemat</h1>\n          <Options />\n        </>\n  )\n};\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}