{"version":3,"sources":["MapView.js","Options.js","index.js"],"names":["MapView","props","state","zoom","info","position","this","Map","center","TileLayer","attribution","url","Marker","Popup","React","Component","Options","items","isLoaded","value","lat","lon","handleChange","bind","event","obj","JSON","parse","target","setState","fetch","method","headers","body","stringify","json","then","response","data","bikeRentalStations","teksti","stopInfo","name","bikesAvailable","spacesAvailable","onChange","selected","disabled","map","item","key","App","ReactDOM","render","document","getElementById"],"mappings":"2QAGaA,EAAb,kDACE,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,KAAM,EAAKF,MAAMG,KAAK,IAHR,EADpB,qDASI,IAAMC,EAAW,CAACC,KAAKL,MAAMG,KAAK,GAAIE,KAAKL,MAAMG,KAAK,IACtD,OACE,kBAACG,EAAA,EAAD,CAAKC,OAAQH,EAAUF,KAAMG,KAAKJ,MAAMC,MACtC,kBAACM,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,uDAER,kBAACC,EAAA,EAAD,CAAQP,SAAUA,GAClB,kBAACQ,EAAA,EAAD,KAAQP,KAAKL,MAAMG,KAAK,GAAG,6BAA3B,yBAAkDE,KAAKL,MAAMG,KAAK,UAjB1E,GAA6BU,IAAMC,WCItBC,EAAb,kDAEE,WAAYf,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXe,MAAO,GACPC,UAAU,EACVC,MAAO,GACPC,IAZU,OAaVC,IAZU,OAaVlB,KAZW,IAeb,EAAKmB,aAAe,EAAKA,aAAaC,KAAlB,gBAXJ,EAFpB,yDAiBeC,GACX,IAAIC,EAAMC,KAAKC,MAAMH,EAAMI,OAAOT,OAClCb,KAAKuB,SAAS,CACZV,MAAOM,EACPL,IAAKK,EAAIL,IACTC,IAAKI,EAAIJ,QAtBf,0CA0BuB,IAAD,OAElBS,MAAM,kEAAmE,CACvEC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMP,KAAKQ,UAAU,CACnB,MAAQ,8RAYVC,MAAM,IAEHC,MAAK,SAAAC,GAAQ,OAAIA,EAASF,UAC1BC,MAAK,SAAAD,GACJ,EAAKN,SAAS,CACZZ,MAAOkB,EAAKG,KAAKC,mBACjBrB,UAAU,SAlDtB,+BAuDY,IAAD,EAC0BZ,KAAKJ,MAA/BgB,EADA,EACAA,SAAUD,EADV,EACUA,MAAOE,EADjB,EACiBA,MACxB,IAAKD,EACH,OAAO,4CAIT,IAEIsB,EAFEC,EAAW,CAACnC,KAAKJ,MAAMkB,IAAKd,KAAKJ,MAAMmB,IAAKf,KAAKJ,MAAMC,KAAMG,KAAKJ,MAAMiB,MAAMuB,KAAMpC,KAAKJ,MAAMiB,MAAMwB,gBAW3G,OALEH,EAxEU,SAuERlC,KAAKJ,MAAMkB,IACJ,2BAAG,8BAEH,2BAAID,EAAMuB,KAAV,2BAAkCvB,EAAMwB,eAAxC,kCACiBxB,EAAMyB,iBAG9B,oCACE,4BAAQC,SAAUvC,KAAKgB,cACrB,4BAAQwB,UAAQ,EAACC,UAAQ,GAAzB,iBACD9B,EAAM+B,KAAI,SAAAC,GAAI,OACX,4BAAQC,IAAKD,EAAKP,KAAMvB,MAAOO,KAAKQ,UAAUe,IAC3CA,EAAKP,UAIXF,EACD,kBAAC,EAAD,CAASpC,KAAMqC,SApFzB,GAA6B3B,IAAMC,WCD7BoC,G,MAAM,WACV,OACI,oCACE,sDACE,kBAAC,EAAD,SAKVC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2a64cff5.chunk.js","sourcesContent":["import React from 'react'\nimport { Map, TileLayer, Marker, Popup} from 'react-leaflet';\n\nexport class MapView extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      zoom: this.props.info[2],\n    };\n  }\n\n  render() {\n    const position = [this.props.info[0], this.props.info[1]];\n    return(\n      <Map center={position} zoom={this.state.zoom}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <Marker position={position}>\n        <Popup>{this.props.info[3]}<br />Vapaita pyöriä: {this.props.info[4]}</Popup>\n      </Marker>\n      </Map>\n  )\n  }\n}","import React from 'react'\nimport {MapView} from './MapView';\n\nconst originLat=60.167;\nconst originLon=24.942;\nconst originZoom=14;\n\nexport class Options extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      value: '',\n      lat: originLat,\n      lon: originLon,\n      zoom: originZoom\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  // Event handler for selecting the station from the list. Sets the\n  handleChange(event) {\n    var obj = JSON.parse(event.target.value);\n    this.setState({\n      value: obj,\n      lat: obj.lat,\n      lon: obj.lon\n    })\n  }\n\n  componentDidMount() {\n    // Receive data from Digitransit API\n    fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', {\n      method: 'POST',\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        \"query\": `{\n          bikeRentalStations {\n                    stationId\n                    name\n                    bikesAvailable\n                    spacesAvailable\n                    lat\n                    lon\n                    allowDropoff\n                    }\n        }`\n      }),\n      json: true\n    })\n        .then(response => response.json())\n        .then(json => {\n          this.setState({\n            items: json.data.bikeRentalStations,\n            isLoaded: true\n          })\n        });\n  }\n\n  render() {\n    const {isLoaded, items, value} = this.state;\n    if (!isLoaded){\n      return <option>Lataa...</option>\n    }\n\n    // Bike stop info passed to Mapview\n    const stopInfo = [this.state.lat, this.state.lon, this.state.zoom, this.state.value.name, this.state.value.bikesAvailable];\n\n    let teksti;\n\n    // Empty field for starting view\n    if (this.state.lat===originLat){\n      teksti = <p><br/></p>\n    } else {\n      teksti = <p>{value.name}, vapaita pyöriä: {value.bikesAvailable},\n        vapaita pyöräpaikkoja: {value.spacesAvailable}</p>\n    }\n    return (\n        <>\n          <select onChange={this.handleChange}>\n            <option selected disabled>Valitse asema</option>\n          {items.map(item => (\n              <option key={item.name} value={JSON.stringify(item)}>\n                {item.name}\n              </option>\n          ))}\n          </select>\n          {teksti}\n          <MapView info={stopInfo}/>\n        </>\n    );\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Options} from \"./Options\"\n\nimport './index.css'\n\nconst App = () => {\n  return (\n      <>\n        <h1>Polkupyöräasemat</h1>\n          <Options />\n        </>\n  )\n};\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}